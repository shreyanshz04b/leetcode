class Solution {
public:
  int checkRecord(int n) {
    vector<vector<long long int>> dp(n + 1, vector<long long int>(4));

    long long int p = 10e8 + 7;

    dp[1][0] = 1; // 'PRESENT'
    dp[1][1] = 1; // 'LATE'
    dp[1][2] = 1; // 'ABSENT'
    dp[1][3] = 0; // NP
    dp[0][0] = 1; 
    for (int i = 2; i <= n; i++) {
      dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) %
                 p; // (present yesterday or late yesterday) and present today
      dp[i][1] = (dp[i - 1][0] + dp[i - 2][0]) %
                 p; // (present yesterday and late today) or (present 2 days
                    // back and late for 2 days)
      dp[i][2] =(dp[i - 1][2] + dp[i - 1][3] + dp[i - 1][0] + dp[i - 1][1]) % p;
      dp[i][3] = (dp[i - 1][2] + dp[i - 2][2]) % p;
    }
    return (dp[n][0] + dp[n][1] + dp[n][2] + dp[n][3]) % p;
  }
};
