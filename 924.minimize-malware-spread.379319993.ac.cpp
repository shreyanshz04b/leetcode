struct DSU {
  vector<int> parent;
  vector<int> size;
  DSU(int n) : size(n, 1), parent(n) {
    for (int i = 0; i < n; i++)
      parent[i] = i;
  }
  int get(int i) {
    if (parent[i] == i)
      return i;
    return parent[i] = get(parent[i]);
  }
  void join(int i, int j) {
    i = get(i);
    j = get(j);
    if (i == j)
      return;
    if (size[j] > size[i])
      swap(i, j);
    size[i] += size[j];
    parent[j] = i;
  }
};

class Solution {
public:
  int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial) {
    sort(initial.begin(), initial.end());
    int n = graph.size();
    DSU dsu(n);
    for (int i = 0; i < n; i++)
      for (int j = 0; j < n; j++)
        if (graph[i][j])
          dsu.join(i, j);
    unordered_map<int, int> count;
    for (int a : initial) {
      a = dsu.get(a);
      count[a]++;
    }
    int ans = initial[0];
    int best = 0;
    for (int a : initial) {
      int j = dsu.get(a);
      if (count[j] > 1)
        continue;
      if (dsu.size[j] > best) {
        best = dsu.size[j];
        ans = a;
      }
    }
    return ans;
  }
};
